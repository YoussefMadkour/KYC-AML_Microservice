name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.12"

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-'))
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="staging-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push images
      run: |
        # Build API image
        docker build -t ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:${{ steps.version.outputs.version }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:${{ steps.version.outputs.version }}
        
        # Build Worker image
        docker build -f Dockerfile.worker -t ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:worker-${{ steps.version.outputs.version }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:worker-${{ steps.version.outputs.version }}

    - name: Deploy to staging
      run: |
        echo "Deploying version ${{ steps.version.outputs.version }} to staging"
        # Add your staging deployment commands here
        # Example: kubectl set image deployment/api api=${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:${{ steps.version.outputs.version }}

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment"
        # Add smoke test commands here
        # Example: curl -f https://staging-api.example.com/health

  deploy-production:
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-'))
    environment: production
    needs: []
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="production-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push production images
      run: |
        # Build API image
        docker build -t ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:${{ steps.version.outputs.version }} .
        docker build -t ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:production-latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:${{ steps.version.outputs.version }}
        docker push ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:production-latest
        
        # Build Worker image
        docker build -f Dockerfile.worker -t ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:worker-${{ steps.version.outputs.version }} .
        docker build -f Dockerfile.worker -t ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:worker-production-latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:worker-${{ steps.version.outputs.version }}
        docker push ${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:worker-production-latest

    - name: Deploy to production
      run: |
        echo "Deploying version ${{ steps.version.outputs.version }} to production"
        # Add your production deployment commands here
        # Example: kubectl set image deployment/api api=${{ secrets.DOCKER_USERNAME }}/kyc-aml-microservice:${{ steps.version.outputs.version }}

    - name: Run production smoke tests
      run: |
        echo "Running smoke tests against production environment"
        # Add production smoke test commands here
        # Example: curl -f https://api.example.com/health

    - name: Create GitHub release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back deployment due to failure"
        # Add rollback commands here
        # Example: kubectl rollout undo deployment/api